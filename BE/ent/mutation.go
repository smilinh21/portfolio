// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Portfolio/ent/formdata"
	"Portfolio/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFormData = "FormData"
)

// FormDataMutation represents an operation that mutates the FormData nodes in the graph.
type FormDataMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	email         *string
	message       *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FormData, error)
	predicates    []predicate.FormData
}

var _ ent.Mutation = (*FormDataMutation)(nil)

// formdataOption allows management of the mutation configuration using functional options.
type formdataOption func(*FormDataMutation)

// newFormDataMutation creates new mutation for the FormData entity.
func newFormDataMutation(c config, op Op, opts ...formdataOption) *FormDataMutation {
	m := &FormDataMutation{
		config:        c,
		op:            op,
		typ:           TypeFormData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormDataID sets the ID field of the mutation.
func withFormDataID(id int) formdataOption {
	return func(m *FormDataMutation) {
		var (
			err   error
			once  sync.Once
			value *FormData
		)
		m.oldValue = func(ctx context.Context) (*FormData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FormData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFormData sets the old FormData of the mutation.
func withFormData(node *FormData) formdataOption {
	return func(m *FormDataMutation) {
		m.oldValue = func(context.Context) (*FormData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FormDataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FormDataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FormData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FormDataMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FormDataMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the FormData entity.
// If the FormData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormDataMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FormDataMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *FormDataMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *FormDataMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the FormData entity.
// If the FormData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormDataMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *FormDataMutation) ResetEmail() {
	m.email = nil
}

// SetMessage sets the "message" field.
func (m *FormDataMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *FormDataMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the FormData entity.
// If the FormData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormDataMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *FormDataMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[formdata.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *FormDataMutation) MessageCleared() bool {
	_, ok := m.clearedFields[formdata.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *FormDataMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, formdata.FieldMessage)
}

// SetCreatedAt sets the "created_at" field.
func (m *FormDataMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FormDataMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FormData entity.
// If the FormData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormDataMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *FormDataMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[formdata.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *FormDataMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[formdata.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FormDataMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, formdata.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FormDataMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FormDataMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FormData entity.
// If the FormData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormDataMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *FormDataMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[formdata.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *FormDataMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[formdata.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FormDataMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, formdata.FieldUpdatedAt)
}

// Where appends a list predicates to the FormDataMutation builder.
func (m *FormDataMutation) Where(ps ...predicate.FormData) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FormDataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FormDataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FormData, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FormDataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FormDataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FormData).
func (m *FormDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormDataMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, formdata.FieldName)
	}
	if m.email != nil {
		fields = append(fields, formdata.FieldEmail)
	}
	if m.message != nil {
		fields = append(fields, formdata.FieldMessage)
	}
	if m.created_at != nil {
		fields = append(fields, formdata.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, formdata.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case formdata.FieldName:
		return m.Name()
	case formdata.FieldEmail:
		return m.Email()
	case formdata.FieldMessage:
		return m.Message()
	case formdata.FieldCreatedAt:
		return m.CreatedAt()
	case formdata.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case formdata.FieldName:
		return m.OldName(ctx)
	case formdata.FieldEmail:
		return m.OldEmail(ctx)
	case formdata.FieldMessage:
		return m.OldMessage(ctx)
	case formdata.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case formdata.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FormData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case formdata.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case formdata.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case formdata.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case formdata.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case formdata.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FormData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormDataMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormDataMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FormData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormDataMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(formdata.FieldMessage) {
		fields = append(fields, formdata.FieldMessage)
	}
	if m.FieldCleared(formdata.FieldCreatedAt) {
		fields = append(fields, formdata.FieldCreatedAt)
	}
	if m.FieldCleared(formdata.FieldUpdatedAt) {
		fields = append(fields, formdata.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormDataMutation) ClearField(name string) error {
	switch name {
	case formdata.FieldMessage:
		m.ClearMessage()
		return nil
	case formdata.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case formdata.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown FormData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormDataMutation) ResetField(name string) error {
	switch name {
	case formdata.FieldName:
		m.ResetName()
		return nil
	case formdata.FieldEmail:
		m.ResetEmail()
		return nil
	case formdata.FieldMessage:
		m.ResetMessage()
		return nil
	case formdata.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case formdata.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown FormData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormDataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormDataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormDataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FormData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormDataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FormData edge %s", name)
}
