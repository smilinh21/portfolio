// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Portfolio/ent/formdata"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormDataCreate is the builder for creating a FormData entity.
type FormDataCreate struct {
	config
	mutation *FormDataMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (fdc *FormDataCreate) SetName(s string) *FormDataCreate {
	fdc.mutation.SetName(s)
	return fdc
}

// SetEmail sets the "email" field.
func (fdc *FormDataCreate) SetEmail(s string) *FormDataCreate {
	fdc.mutation.SetEmail(s)
	return fdc
}

// SetMessage sets the "message" field.
func (fdc *FormDataCreate) SetMessage(s string) *FormDataCreate {
	fdc.mutation.SetMessage(s)
	return fdc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (fdc *FormDataCreate) SetNillableMessage(s *string) *FormDataCreate {
	if s != nil {
		fdc.SetMessage(*s)
	}
	return fdc
}

// SetCreatedAt sets the "created_at" field.
func (fdc *FormDataCreate) SetCreatedAt(t time.Time) *FormDataCreate {
	fdc.mutation.SetCreatedAt(t)
	return fdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fdc *FormDataCreate) SetNillableCreatedAt(t *time.Time) *FormDataCreate {
	if t != nil {
		fdc.SetCreatedAt(*t)
	}
	return fdc
}

// SetUpdatedAt sets the "updated_at" field.
func (fdc *FormDataCreate) SetUpdatedAt(t time.Time) *FormDataCreate {
	fdc.mutation.SetUpdatedAt(t)
	return fdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fdc *FormDataCreate) SetNillableUpdatedAt(t *time.Time) *FormDataCreate {
	if t != nil {
		fdc.SetUpdatedAt(*t)
	}
	return fdc
}

// Mutation returns the FormDataMutation object of the builder.
func (fdc *FormDataCreate) Mutation() *FormDataMutation {
	return fdc.mutation
}

// Save creates the FormData in the database.
func (fdc *FormDataCreate) Save(ctx context.Context) (*FormData, error) {
	return withHooks(ctx, fdc.sqlSave, fdc.mutation, fdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fdc *FormDataCreate) SaveX(ctx context.Context) *FormData {
	v, err := fdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdc *FormDataCreate) Exec(ctx context.Context) error {
	_, err := fdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdc *FormDataCreate) ExecX(ctx context.Context) {
	if err := fdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdc *FormDataCreate) check() error {
	if _, ok := fdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FormData.name"`)}
	}
	if _, ok := fdc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "FormData.email"`)}
	}
	return nil
}

func (fdc *FormDataCreate) sqlSave(ctx context.Context) (*FormData, error) {
	if err := fdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fdc.mutation.id = &_node.ID
	fdc.mutation.done = true
	return _node, nil
}

func (fdc *FormDataCreate) createSpec() (*FormData, *sqlgraph.CreateSpec) {
	var (
		_node = &FormData{config: fdc.config}
		_spec = sqlgraph.NewCreateSpec(formdata.Table, sqlgraph.NewFieldSpec(formdata.FieldID, field.TypeInt))
	)
	if value, ok := fdc.mutation.Name(); ok {
		_spec.SetField(formdata.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fdc.mutation.Email(); ok {
		_spec.SetField(formdata.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := fdc.mutation.Message(); ok {
		_spec.SetField(formdata.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := fdc.mutation.CreatedAt(); ok {
		_spec.SetField(formdata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fdc.mutation.UpdatedAt(); ok {
		_spec.SetField(formdata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// FormDataCreateBulk is the builder for creating many FormData entities in bulk.
type FormDataCreateBulk struct {
	config
	err      error
	builders []*FormDataCreate
}

// Save creates the FormData entities in the database.
func (fdcb *FormDataCreateBulk) Save(ctx context.Context) ([]*FormData, error) {
	if fdcb.err != nil {
		return nil, fdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fdcb.builders))
	nodes := make([]*FormData, len(fdcb.builders))
	mutators := make([]Mutator, len(fdcb.builders))
	for i := range fdcb.builders {
		func(i int, root context.Context) {
			builder := fdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FormDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fdcb *FormDataCreateBulk) SaveX(ctx context.Context) []*FormData {
	v, err := fdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdcb *FormDataCreateBulk) Exec(ctx context.Context) error {
	_, err := fdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdcb *FormDataCreateBulk) ExecX(ctx context.Context) {
	if err := fdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
