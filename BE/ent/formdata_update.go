// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Portfolio/ent/formdata"
	"Portfolio/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormDataUpdate is the builder for updating FormData entities.
type FormDataUpdate struct {
	config
	hooks    []Hook
	mutation *FormDataMutation
}

// Where appends a list predicates to the FormDataUpdate builder.
func (fdu *FormDataUpdate) Where(ps ...predicate.FormData) *FormDataUpdate {
	fdu.mutation.Where(ps...)
	return fdu
}

// SetName sets the "name" field.
func (fdu *FormDataUpdate) SetName(s string) *FormDataUpdate {
	fdu.mutation.SetName(s)
	return fdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fdu *FormDataUpdate) SetNillableName(s *string) *FormDataUpdate {
	if s != nil {
		fdu.SetName(*s)
	}
	return fdu
}

// SetEmail sets the "email" field.
func (fdu *FormDataUpdate) SetEmail(s string) *FormDataUpdate {
	fdu.mutation.SetEmail(s)
	return fdu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fdu *FormDataUpdate) SetNillableEmail(s *string) *FormDataUpdate {
	if s != nil {
		fdu.SetEmail(*s)
	}
	return fdu
}

// SetMessage sets the "message" field.
func (fdu *FormDataUpdate) SetMessage(s string) *FormDataUpdate {
	fdu.mutation.SetMessage(s)
	return fdu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (fdu *FormDataUpdate) SetNillableMessage(s *string) *FormDataUpdate {
	if s != nil {
		fdu.SetMessage(*s)
	}
	return fdu
}

// ClearMessage clears the value of the "message" field.
func (fdu *FormDataUpdate) ClearMessage() *FormDataUpdate {
	fdu.mutation.ClearMessage()
	return fdu
}

// SetCreatedAt sets the "created_at" field.
func (fdu *FormDataUpdate) SetCreatedAt(t time.Time) *FormDataUpdate {
	fdu.mutation.SetCreatedAt(t)
	return fdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fdu *FormDataUpdate) SetNillableCreatedAt(t *time.Time) *FormDataUpdate {
	if t != nil {
		fdu.SetCreatedAt(*t)
	}
	return fdu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (fdu *FormDataUpdate) ClearCreatedAt() *FormDataUpdate {
	fdu.mutation.ClearCreatedAt()
	return fdu
}

// SetUpdatedAt sets the "updated_at" field.
func (fdu *FormDataUpdate) SetUpdatedAt(t time.Time) *FormDataUpdate {
	fdu.mutation.SetUpdatedAt(t)
	return fdu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fdu *FormDataUpdate) SetNillableUpdatedAt(t *time.Time) *FormDataUpdate {
	if t != nil {
		fdu.SetUpdatedAt(*t)
	}
	return fdu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fdu *FormDataUpdate) ClearUpdatedAt() *FormDataUpdate {
	fdu.mutation.ClearUpdatedAt()
	return fdu
}

// Mutation returns the FormDataMutation object of the builder.
func (fdu *FormDataUpdate) Mutation() *FormDataMutation {
	return fdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fdu *FormDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fdu.sqlSave, fdu.mutation, fdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fdu *FormDataUpdate) SaveX(ctx context.Context) int {
	affected, err := fdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fdu *FormDataUpdate) Exec(ctx context.Context) error {
	_, err := fdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdu *FormDataUpdate) ExecX(ctx context.Context) {
	if err := fdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fdu *FormDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(formdata.Table, formdata.Columns, sqlgraph.NewFieldSpec(formdata.FieldID, field.TypeInt))
	if ps := fdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fdu.mutation.Name(); ok {
		_spec.SetField(formdata.FieldName, field.TypeString, value)
	}
	if value, ok := fdu.mutation.Email(); ok {
		_spec.SetField(formdata.FieldEmail, field.TypeString, value)
	}
	if value, ok := fdu.mutation.Message(); ok {
		_spec.SetField(formdata.FieldMessage, field.TypeString, value)
	}
	if fdu.mutation.MessageCleared() {
		_spec.ClearField(formdata.FieldMessage, field.TypeString)
	}
	if value, ok := fdu.mutation.CreatedAt(); ok {
		_spec.SetField(formdata.FieldCreatedAt, field.TypeTime, value)
	}
	if fdu.mutation.CreatedAtCleared() {
		_spec.ClearField(formdata.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fdu.mutation.UpdatedAt(); ok {
		_spec.SetField(formdata.FieldUpdatedAt, field.TypeTime, value)
	}
	if fdu.mutation.UpdatedAtCleared() {
		_spec.ClearField(formdata.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{formdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fdu.mutation.done = true
	return n, nil
}

// FormDataUpdateOne is the builder for updating a single FormData entity.
type FormDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FormDataMutation
}

// SetName sets the "name" field.
func (fduo *FormDataUpdateOne) SetName(s string) *FormDataUpdateOne {
	fduo.mutation.SetName(s)
	return fduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fduo *FormDataUpdateOne) SetNillableName(s *string) *FormDataUpdateOne {
	if s != nil {
		fduo.SetName(*s)
	}
	return fduo
}

// SetEmail sets the "email" field.
func (fduo *FormDataUpdateOne) SetEmail(s string) *FormDataUpdateOne {
	fduo.mutation.SetEmail(s)
	return fduo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fduo *FormDataUpdateOne) SetNillableEmail(s *string) *FormDataUpdateOne {
	if s != nil {
		fduo.SetEmail(*s)
	}
	return fduo
}

// SetMessage sets the "message" field.
func (fduo *FormDataUpdateOne) SetMessage(s string) *FormDataUpdateOne {
	fduo.mutation.SetMessage(s)
	return fduo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (fduo *FormDataUpdateOne) SetNillableMessage(s *string) *FormDataUpdateOne {
	if s != nil {
		fduo.SetMessage(*s)
	}
	return fduo
}

// ClearMessage clears the value of the "message" field.
func (fduo *FormDataUpdateOne) ClearMessage() *FormDataUpdateOne {
	fduo.mutation.ClearMessage()
	return fduo
}

// SetCreatedAt sets the "created_at" field.
func (fduo *FormDataUpdateOne) SetCreatedAt(t time.Time) *FormDataUpdateOne {
	fduo.mutation.SetCreatedAt(t)
	return fduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fduo *FormDataUpdateOne) SetNillableCreatedAt(t *time.Time) *FormDataUpdateOne {
	if t != nil {
		fduo.SetCreatedAt(*t)
	}
	return fduo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (fduo *FormDataUpdateOne) ClearCreatedAt() *FormDataUpdateOne {
	fduo.mutation.ClearCreatedAt()
	return fduo
}

// SetUpdatedAt sets the "updated_at" field.
func (fduo *FormDataUpdateOne) SetUpdatedAt(t time.Time) *FormDataUpdateOne {
	fduo.mutation.SetUpdatedAt(t)
	return fduo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fduo *FormDataUpdateOne) SetNillableUpdatedAt(t *time.Time) *FormDataUpdateOne {
	if t != nil {
		fduo.SetUpdatedAt(*t)
	}
	return fduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fduo *FormDataUpdateOne) ClearUpdatedAt() *FormDataUpdateOne {
	fduo.mutation.ClearUpdatedAt()
	return fduo
}

// Mutation returns the FormDataMutation object of the builder.
func (fduo *FormDataUpdateOne) Mutation() *FormDataMutation {
	return fduo.mutation
}

// Where appends a list predicates to the FormDataUpdate builder.
func (fduo *FormDataUpdateOne) Where(ps ...predicate.FormData) *FormDataUpdateOne {
	fduo.mutation.Where(ps...)
	return fduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fduo *FormDataUpdateOne) Select(field string, fields ...string) *FormDataUpdateOne {
	fduo.fields = append([]string{field}, fields...)
	return fduo
}

// Save executes the query and returns the updated FormData entity.
func (fduo *FormDataUpdateOne) Save(ctx context.Context) (*FormData, error) {
	return withHooks(ctx, fduo.sqlSave, fduo.mutation, fduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fduo *FormDataUpdateOne) SaveX(ctx context.Context) *FormData {
	node, err := fduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fduo *FormDataUpdateOne) Exec(ctx context.Context) error {
	_, err := fduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fduo *FormDataUpdateOne) ExecX(ctx context.Context) {
	if err := fduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fduo *FormDataUpdateOne) sqlSave(ctx context.Context) (_node *FormData, err error) {
	_spec := sqlgraph.NewUpdateSpec(formdata.Table, formdata.Columns, sqlgraph.NewFieldSpec(formdata.FieldID, field.TypeInt))
	id, ok := fduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FormData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, formdata.FieldID)
		for _, f := range fields {
			if !formdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != formdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fduo.mutation.Name(); ok {
		_spec.SetField(formdata.FieldName, field.TypeString, value)
	}
	if value, ok := fduo.mutation.Email(); ok {
		_spec.SetField(formdata.FieldEmail, field.TypeString, value)
	}
	if value, ok := fduo.mutation.Message(); ok {
		_spec.SetField(formdata.FieldMessage, field.TypeString, value)
	}
	if fduo.mutation.MessageCleared() {
		_spec.ClearField(formdata.FieldMessage, field.TypeString)
	}
	if value, ok := fduo.mutation.CreatedAt(); ok {
		_spec.SetField(formdata.FieldCreatedAt, field.TypeTime, value)
	}
	if fduo.mutation.CreatedAtCleared() {
		_spec.ClearField(formdata.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fduo.mutation.UpdatedAt(); ok {
		_spec.SetField(formdata.FieldUpdatedAt, field.TypeTime, value)
	}
	if fduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(formdata.FieldUpdatedAt, field.TypeTime)
	}
	_node = &FormData{config: fduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{formdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fduo.mutation.done = true
	return _node, nil
}
